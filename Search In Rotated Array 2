class Solution { 
    
    boolean binarySearch(int[] nums, int target, int start, int end) {
    while (start <= end) {
        int mid = start + (end - start) / 2;

       if (target < nums[mid]) {
            end = mid - 1;
        } else if (target > nums[mid]) {
            start = mid + 1;
        } else {
            // ans found
            return true;
        }
    }
    return false;
}

int findingPivotwithduplicates (int[] nums) {
    int start = 0;
    int end = nums.length - 1;
    while (start <= end) {
        int mid = start + (end - start) / 2;
        if (mid < end && nums[mid] > nums[mid + 1]) {
            // You can say a glitch in the matrix, i.e., linearity of an array is violated, and hence you can say that this is an exact pivot.
            return mid;
        }

        if (mid > start && nums[mid] < nums[mid - 1]) {
            // same as above, the array's supposed linearity is violated hence pivot case 2
            return mid - 1;
        }


//creating a condition such that either of our identical start or end value discards so we cann apply
//The general rule of binary search,if we didnâ€™t do this step the comaparsion cant take place and algotihm will be hard to implement 
if  (nums[start] == nums[mid]  && nums[mid]== nums[end])
{
if ( start < end && nums[start] > nums [start+1])
{
  return start;
}
start++;
if (end > start && nums[end]< nums[end-1])
{
//since end cant be pivot 
   return end-1;
}
end--;
}

//if left side is sorted, Making sure it meet two conditions
else if (nums[start]<nums[mid] || nums[start]==nums[mid] && nums[mid] >nums[end])
{
 start= mid+1;
}
else {
   end=mid-1;
}
    }
    // in case the array is not rotated.
    return -1;
}

boolean search(int[] nums, int target) {
    int pivot = findingPivotwithduplicates (nums);

    if (pivot == -1) {
        // means our array is not rotated hence use normal binary search
        return binarySearch(nums, target, 0, nums.length - 1);
    }

    if (nums[pivot] == target) {
        return true;
    }

    if (target >= nums[0]) {
        // means our target, as it's from descending to ascending, hence our result shows that target will be in the left-hand side as it is in the left-hand
        return binarySearch(nums, target, 0, pivot - 1);
    }

    return binarySearch(nums, target, pivot + 1, nums.length - 1);
}

}
